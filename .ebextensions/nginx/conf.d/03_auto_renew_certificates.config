# https://letsencrypt.org/docs/rate-limits/?origin_team=T7Y3AUHL2
# Last updated: June 4, 2019
# Let’s Encrypt provides rate limits to ensure fair usage by as many people as possible. We believe these rate limits are
# high enough to work for most people by default. We’ve also designed them so renewing a certificate almost never hits a
# rate limit, and so that large organizations can gradually increase the number of certificates they can issue without
# requiring intervention from Let’s Encrypt.
#
# SO WE ONLY RUN COMMAND BELOW AT THE FIRST TIME WHEN DEPLOYED TO CREATE CERTIFICATE OR RENEW CERTIFICATE WHEN IT EXPIRED
#

# container_commands:
#   10_installcertbot:
#     command: "wget https://dl.eff.org/certbot-auto;chmod a+x certbot-auto"
#   20_getcert:
#     command: "sudo ./certbot-auto certonly --debug --non-interactive --email ${CERTBOT_EMAIL} --agree-tos --standalone --domains ${CERTBOT_HOST_NAME} --domains www.${CERTBOT_HOST_NAME} --keep-until-expiring --pre-hook \"/etc/init.d/nginx stop\" --post-hook \"/etc/init.d/nginx start\""
#   30_link:
#     command: "ln -sf /etc/letsencrypt/live/${CERTBOT_HOST_NAME} /etc/letsencrypt/live/ebcert"
#   40_config:
#     command: "mv /etc/nginx/conf.d/proxy.pre /etc/nginx/conf.d/proxy.conf"
#   50_resstart:
#     command: "/etc/init.d/nginx restart"

files:
  "/etc/cron.d/auto_renew_certificate":
    mode: "000644"
    owner: root
    group: root
    content: |
      # The lifetime of Let’s Encrypt certificates is 90 days max. So we need executes command renew certificate at
      # 10:35am on the 28th day of every 2nd month (arbitrary, but approximately every 60 days).
      35 10 28 */2 * root /usr/local/bin/auto_renew_certificate.sh --silent >> /usr/local/bin/cron.log 2>> /usr/local/bin/cron_error.log

      # The command below only for test
      # 5,10,15,20,25,30,35,40,45,50,55 * * * * root /usr/local/bin/auto_renew_certificate.sh --silent >> /usr/local/bin/cron.log 2>> /usr/local/bin/cron_error.log

  "/usr/local/bin/auto_renew_certificate.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash

      # Load ENV variables
      source /opt/elasticbeanstalk/support/envvars

      # Only run at first instance and never run on other instance created by autoscaling
      echo "Starting job Auto Renew Let's Encrypt Certificate at" `date`
      /usr/local/bin/only_first_instance_run_job_validation.sh || exit

      echo "Run certbot-auto to renew certificate at" `date`

      cd /var/app/current/ && rm -f /var/app/current/certbot-auto && wget https://dl.eff.org/certbot-auto && \
      chmod a+x certbot-auto && ./certbot-auto certonly --force-renewal --debug --non-interactive --email ${CERTBOT_EMAIL} \
      --agree-tos --standalone --domains ${CERTBOT_HOST_NAME} --domains www.${CERTBOT_HOST_NAME}

      echo "Done Renew certificate at" `date`

      echo "Uploading certificate (renewed) at" `date`

      AWS_ACCESS_KEY_ID=${AWS_ACM_KEY} AWS_SECRET_ACCESS_KEY=${AWS_ACM_SECRET_ACCESS_KEY} AWS_DEFAULT_REGION=us-east-1 \
        aws acm import-certificate \
        --region us-east-1 \
        --certificate-arn ${CERTIFICATE_ARN} \
        --certificate file:///etc/letsencrypt/live/ebcert/cert.pem \
        --private-key file:///etc/letsencrypt/live/ebcert/privkey.pem \
        --certificate-chain file:///etc/letsencrypt/live/ebcert/fullchain.pem

      echo "Uploaded new certificate at" `date`

      echo "Finish Job Auto Renew Let's Encrypt Certificate at" `date`


  "/usr/local/bin/only_first_instance_run_job_validation.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash

      # Load ENV variables
      source /opt/elasticbeanstalk/support/envvars

      METADATA=/opt/aws/bin/ec2-metadata
      INSTANCE_ID=`$METADATA -i | awk '{print $2}'`
      REGION=`$METADATA -z | awk '{print substr($2, 0, length($2)-1)}'`

      # Find our Auto Scaling Group name.
      ASG=`AWS_ACCESS_KEY_ID=${AWS_ACM_KEY} AWS_SECRET_ACCESS_KEY=${AWS_ACM_SECRET_ACCESS_KEY} AWS_DEFAULT_REGION=us-east-1 \
        aws ec2 describe-tags --filters "Name=resource-id,Values=$INSTANCE_ID" --region $REGION --output text | \
        awk '/aws:autoscaling:groupName/ {print $5}'`

      # Find the first instance in the Group
      FIRST=`AWS_ACCESS_KEY_ID=${AWS_ACM_KEY} AWS_SECRET_ACCESS_KEY=${AWS_ACM_SECRET_ACCESS_KEY} AWS_DEFAULT_REGION=us-east-1 \
        aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names $ASG \
        --region $REGION --output text | awk '/InService/ {print $4}' | sort | head -1`

      echo "Current INSTANCE_ID:" ${INSTANCE_ID}
      echo "Current FIRST INSTANCE_ID:" ${FIRST}

      # Test if they're the same.
      [ "$FIRST" = "$INSTANCE_ID" ]

commands:
  001_rm_old_cron:
    command: "rm -f *.bak"
    cwd: "/etc/cron.d"
    ignoreErrors: true
  002_rm_old_shell_script:
    command: "rm -f *.bak"
    cwd: "/usr/local/bin"
    ignoreErrors: true
  003_create_soft_to_ebcert:
    command: "ln -sf /etc/letsencrypt/live/${CERTBOT_HOST_NAME} /etc/letsencrypt/live/ebcert"
    ignoreErrors: true
  004_update_proxy_config:
    command: "mv /etc/nginx/conf.d/proxy.pre /etc/nginx/conf.d/proxy.conf"
  005_restart_nginx:
    command: "service nginx restart || service nginx start"
